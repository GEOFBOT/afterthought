use std::str::FromStr;
use crate::ast::Token as AstToken;
use crate::ast::Program;

grammar;

match {
    "(",
    ")",
    "<",
    ">",
    "[",
    "]",
    "{",
    "}",
    r"//[^\(\)<>\[\]\{\}/\s]*" => IMM_NAME,
    r"/[^\(\)<>\[\]\{\}/\s]*" => LITERAL_NAME,
    r"(\+|-)?[0-9]+" => INT
} else {
    r"[^\s]+" => NAME
}

pub IntToken: AstToken = {
    INT => AstToken::Int(i32::from_str(<>).unwrap()),
};
pub NameToken: AstToken = {
    NAME => AstToken::Name(String::from(<>)),
}
;
pub ImmNameToken: AstToken = {
    IMM_NAME => AstToken::ImmName(String::from(<>)),
};

pub LiteralNameToken: AstToken = {
    LITERAL_NAME => AstToken::LiteralName(String::from(<>)),
};

Token: AstToken = {
    IntToken,
    NameToken,
    ImmNameToken,
    LiteralNameToken,
}

Program: Program = {
    <t:Token> <p:Program> => Program::Concat(t, Box::new(p)),
    Token => Program::Concat(<>, Box::new(Program::End))
}
